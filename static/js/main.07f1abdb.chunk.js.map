{"version":3,"sources":["Pokemon/pokemon.js","Pokeframe/pokeframe.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","useState","dataArray","sprites","pokemonCard","setPokemonCard","useEffect","axios","get","url","then","response","data","console","log","catch","error","src","front_default","name","Pokeframe","getAllPokemon","fetch","state","limit","pageOffset","res","json","scrolledPokemon","push","results","setState","pokemons","isFetching","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","render","className","map","pokemon","index","key","pageNumber","this","addEventListener","React","Component","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yUAuCeA,EAhCC,SAACC,GAAU,MAEeC,mBAAS,CAE3CC,UAAW,CACPC,QAAS,MALM,mBAEhBC,EAFgB,KAEHC,EAFG,KAyBvB,OAZAC,qBAAU,WACNC,IAAMC,IAAIR,EAAMS,KACfC,MAAK,SAASC,GACXN,EAAe,CACXH,UAAWS,EAASC,OAExBC,QAAQC,IAAIH,EAASC,SAExBG,OAAM,SAASC,GACZH,QAAQC,IAAIE,QAEjB,CAAChB,EAAMS,MAEN,6BACI,yBAAKQ,IAAKb,EAAYF,UAAUC,QAAQe,gBACxC,8BAAOd,EAAYF,UAAUiB,QC/BpBC,G,kBAEjB,aAAe,IAAD,8BACV,+CAyBJC,cAAgB,WACZC,MAAM,2CAAD,OAA4C,EAAKC,MAAMC,MAAvD,mBAAuE,EAAKD,MAAME,aACtFf,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,UAChBjB,MAAK,SAAAC,GAAa,IAAD,GAEd,IAAKY,MAAMK,iBAAgBC,KAA3B,oBAAmClB,EAASmB,UAC5C,EAAKC,SAAS,CAACC,SAAU,EAAKT,MAAMK,qBAGxC,EAAKG,SAAS,CAACE,YAAY,KAnCjB,EAsCdC,aAAe,WACPC,OAAOC,YAAcC,SAASC,gBAAgBC,YAAcF,SAASC,gBAAgBE,cAEzF,EAAKT,SAAS,CACVE,YAAY,EACZR,WAAY,EAAKF,MAAME,WAAa,MA3C9B,EAkEdgB,OAAS,WACL,OACI,6BACI,mDACA,6BACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACT,EAAKnB,MAAMS,SAASW,KAAI,SAACC,EAAQC,GAAT,OACtB,yBAAKH,UAAU,uCAAuCI,IAAKD,GACvD,kBAAC,EAAD,CAAS1B,KAAOyB,EAAQzB,KAAMV,IAAKmC,EAAQnC,eAzEvE,EAAKc,MAAQ,CACTS,SAAU,GACVJ,gBAAiB,GACjBmB,WAAY,EACZtB,WAAY,EACZD,MAAO,GACPS,YAAY,GARN,E,iFAeVe,KAAK3B,gBACLc,OAAOc,iBAAiB,SAAUD,KAAKd,gB,2CAKlCc,KAAKzB,MAAMU,YAEhBe,KAAK3B,oB,GAzB0B6B,IAAMC,YCU9BC,MAVf,WACE,OACE,yBAAKV,UAAU,OACb,6BACE,kBAAC,EAAD,SCIYW,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2D,MCXNC,IAAShB,OAAO,kBAAC,EAAD,MAASJ,SAASqB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,kB","file":"static/js/main.07f1abdb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\n/* Function component(stateless component), for passing the props.\n * Since they are stateless we will use hooks here. Hooks let us use state without using the class.\n * Always use ES6 annotation. Fat arrow function(nicer way!!!)\n**/\nconst Pokemon = (props) => {\n    //React hook for state\n    const [pokemonCard, setPokemonCard] = useState({\n        //dataArray will not hold the nested data to display, create a corresponding object/array into it to read the nested values.\n        dataArray: {\n            sprites: {}\n        }\n    });\n    /** useEffect hook is called each time the virutal DOM is loaded. It covers all the component lifecycle events. Hence the code from previous commit was adding infite ajax calls.\n      * Equivalent of componentDidUpdate and componentDidMount in one effect. \n      * To limit the useEffect call to only when this function is called, use the second variable (props.url). It essentially tells, call useEffect when certain prop changes.\n      * If want to load this first time, leave the second parameter as empty array i.e to get the componentDidMount effect\n      */  \n    useEffect(() => {\n        axios.get(props.url)\n        .then(function(response) {\n            setPokemonCard({\n                dataArray: response.data\n            })\n            console.log(response.data);\n        })\n        .catch(function(error) {\n            console.log(error);\n        })\n    }, [props.url]);\n    return (\n        <div>\n            <img src={pokemonCard.dataArray.sprites.front_default} />\n            <span>{pokemonCard.dataArray.name}</span>\n        </div>\n    )\n}\nexport default Pokemon;","import React from 'react';\nimport Pokemon from '../Pokemon/pokemon.js';\nimport './pokeframe.css';\n//This component will make call to PokeApi, class based component\nexport default class Pokeframe extends React.Component {\n    //Store states here, constructor is called first when the component is created\n    constructor() {\n        super();\n        this.state = { \n            pokemons: [], \n            scrolledPokemon: [],\n            pageNumber: 0,\n            pageOffset: 0, \n            limit: 15, \n            isFetching: false,\n        }\n    }\n    /* Called after DOM load. Initialisation that require DOM nodes, can go here.\n     * As per the pokeapi.io, to fetch next 20 results set offset. By deafult showing 20 resource in a page. \n     **/\n    componentDidMount() {\n        this.getAllPokemon();\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n    /* Function called whenever state changed*/\n    componentDidUpdate() {\n        if (!this.state.isFetching) \n            return;\n        this.getAllPokemon();\n    }\n\n    getAllPokemon = () => {\n        fetch(`https://pokeapi.co/api/v2/pokemon?limit=${this.state.limit}&offset=${this.state.pageOffset}`)\n        .then(res => res.json())\n        .then(response => {\n            //Add the list to an empty array to keep adding new list\n            this.state.scrolledPokemon.push(...response.results);\n            this.setState({pokemons: this.state.scrolledPokemon});\n        });\n        //Set isFetching to false, very imp\n        this.setState({isFetching: false});\n    }\n    \n    handleScroll = () => {\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight)\n            return; \n        this.setState({\n            isFetching: true, \n            pageOffset: this.state.pageOffset + 15\n        });\n    }\n    /* Remove Pagination event handlers\n    // method called on clicking the previous button\n    previousButtonHandler = () => {\n        this.setState({\n            pageNumber: this.state.pageNumber - 1,\n            pageOffset: this.state.pageNumber * 20\n        })\n        this.getAllPokemon();\n    }\n\n    // method called on clicking the next button\n    nextButtonHandler = () => {\n        this.setState({\n            pageNumber: this.state.pageNumber + 1,\n            pageOffset: this.state.pageNumber * 20\n        })\n        this.getAllPokemon();\n    } */\n\n    //Call the methods with ES6 annotation, render is mandatory for components, others are optional\n    render = () => {\n        return (\n            <div>\n                <div>gotta catch em all</div>\n                <div>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            { this.state.pokemons.map((pokemon,index) =>\n                                <div className=\"col-sm-4 justify-content-center my-5\" key={index}>\n                                    <Pokemon name ={pokemon.name} url={pokemon.url}/>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                    {/* Remove pagination and add infite scroll instead. \n                    <button onClick={this.previousButtonHandler}>Previous</button>\n                    <button onClick={this.nextButtonHandler}>Next</button> */}\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Pokeframe from './Pokeframe/pokeframe.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Pokeframe/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}