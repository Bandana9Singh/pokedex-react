{"version":3,"sources":["Pokemon/pokemon.js","Pokeframe/pokeframe.js","DetailedView/detailedView.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","useState","sprites","id","pokemonCard","setPokemonCard","useEffect","axios","get","url","then","response","data","catch","error","console","log","to","src","front_default","alt","name","Pokeframe","getAllPokemon","fetch","state","limit","pageOffset","res","json","scrolledPokemon","push","results","setState","pokemons","isFetching","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","render","className","map","pokemon","index","key","pageNumber","this","addEventListener","React","Component","DetailedView","height","weight","types","abilities","stats","base_stat","stat","pokemonDetail","setPokemonDetail","match","params","pokemonId","style","backgroundImage","type","ability","statIterator","App","path","exact","component","Boolean","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWA4CeA,EApCC,SAACC,GAAU,MAEeC,mBAAS,CAGvCC,QAAS,GACTC,GAAI,IANW,mBAEhBC,EAFgB,KAEHC,EAFG,KA2BvB,OAbAC,qBAAU,WACNC,IAAMC,IAAIR,EAAMS,KACfC,MAAK,SAASC,GACXN,EAAe,CACXH,QAASS,EAASC,KAAKV,QACvBC,GAAIQ,EAASC,KAAKT,QAGzBU,OAAM,SAASC,GACZC,QAAQC,IAAIF,QAEjB,CAACd,EAAMS,MAGN,6BACI,kBAAC,IAAD,CAAMQ,GAAI,kBAAoBb,EAAYD,IACtC,yBAAKe,IAAKd,EAAYF,QAAQiB,cAAeC,IAAKpB,EAAMqB,OACxD,8BAAOrB,EAAMqB,SCjCRC,G,wDAEjB,aAAe,IAAD,8BACV,gBAyBJC,cAAgB,WACZC,MAAM,2CAAD,OAA4C,EAAKC,MAAMC,MAAvD,mBAAuE,EAAKD,MAAME,aACtFjB,MAAK,SAAAkB,GAAG,OAAIA,EAAIC,UAChBnB,MAAK,SAAAC,GAAa,IAAD,GAEd,IAAKc,MAAMK,iBAAgBC,KAA3B,oBAAmCpB,EAASqB,UAC5C,EAAKC,SAAS,CAACC,SAAU,EAAKT,MAAMK,qBAGxC,EAAKG,SAAS,CAACE,YAAY,KAnCjB,EAsCdC,aAAe,WACPC,OAAOC,YAAcC,SAASC,gBAAgBC,YAAcF,SAASC,gBAAgBE,cAEzF,EAAKT,SAAS,CACVE,YAAY,EACZR,WAAY,EAAKF,MAAME,WAAa,MA3C9B,EAgDdgB,OAAS,WACL,OACI,6BACI,mDACA,6BACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACT,EAAKnB,MAAMS,SAASW,KAAI,SAACC,EAAQC,GAAT,OACtB,yBAAKH,UAAU,uCAAuCI,IAAKD,GACvD,kBAAC,EAAD,CAAS1B,KAAMyB,EAAQzB,KAAMZ,IAAKqC,EAAQrC,eAvDtE,EAAKgB,MAAQ,CACTS,SAAU,GACVJ,gBAAiB,GACjBmB,WAAY,EACZtB,WAAY,EACZD,MAAO,GACPS,YAAY,GARN,E,gEAeVe,KAAK3B,gBACLc,OAAOc,iBAAiB,SAAUD,KAAKd,gB,2CAKlCc,KAAKzB,MAAMU,YAEhBe,KAAK3B,oB,GAzB0B6B,IAAMC,YCuE9BC,G,MAvEM,SAACtD,GAAW,IAAD,EACcC,mBAAS,CAC/CC,QAAS,GACTmB,KAAM,GACNkC,OAAQ,GACRC,OAAQ,GACRC,MAAO,GACPC,UAAW,GACXC,MAAO,CAAC,CACJC,UAAW,EACXC,KAAM,OAVc,mBACrBC,EADqB,KACNC,EADM,KAkC5B,OApBAzD,qBAAU,WACN,GAAIN,EAAMgE,MAAMC,OAAOC,UAAW,CAC9B,IAAI/D,EAAKH,EAAMgE,MAAMC,OAAOC,UAC5B3D,IAAMC,IAAI,qCAAuCL,GAChDO,MAAK,SAASC,GACXoD,EAAiB,CACb7D,QAASS,EAASC,KAAKV,QACvBmB,KAAMV,EAASC,KAAKS,KACpBkC,OAAQ5C,EAASC,KAAK2C,OACtBC,OAAQ7C,EAASC,KAAK4C,OACtBC,MAAO9C,EAASC,KAAK6C,MACrBC,UAAW/C,EAASC,KAAK8C,UACzBC,MAAOhD,EAASC,KAAK+C,WAG5B9C,OAAM,SAASC,GACZC,QAAQC,IAAIF,SAGrB,CAACd,EAAMgE,MAAMC,OAAOC,YAEnB,yBAAKtB,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,gBAAgBuB,MAAO,CAACC,gBAAgB,OAAD,OAAQN,EAAc5D,QAAQiB,cAA9B,SAE1D,yBAAKyB,UAAU,oCACX,6BAAK,uCAAL,IAAyBkB,EAAczC,MACvC,6BAAK,yCAAL,IAA2ByC,EAAcP,QACzC,6BAAK,yCAAL,IAA2BO,EAAcN,QACzC,6BACI,uCACA,4BACMM,EAAcL,MAAMZ,KAAI,SAACwB,EAAKtB,GAAN,OACtB,wBAAIC,IAAKD,GAAQsB,EAAKA,KAAKhD,UAGnC,0CACA,4BACMyC,EAAcJ,UAAUb,KAAI,SAACyB,EAAQvB,GAAT,OAC1B,wBAAIC,IAAKD,GAAQuB,EAAQA,QAAQjD,YAKjD,yBAAKuB,UAAU,oCACX,wCACA,4BACMkB,EAAcH,MAAMd,KAAI,SAAC0B,EAAcxB,GAAf,OACtB,wBAAIC,IAAKD,GAAO,8BAAOwB,EAAaV,KAAKxC,KAAzB,MAAwCkD,EAAaX,oBClDlFY,MAZf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK5B,UAAU,OACb,kBAAC,IAAD,CAAO6B,KAAK,IAAIC,OAAK,EAACC,UAAWrD,IACjC,kBAAC,IAAD,CAAOmD,KAAK,iBAAiBC,OAAK,EAACC,UAAWrD,IAC9C,kBAAC,IAAD,CAAOmD,KAAK,4BAA4BC,OAAK,EAACC,UAAWrB,OCD7CsB,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASd,MACvB,2D,MCXNe,IAASpC,OAAO,kBAAC,EAAD,MAASJ,SAASyC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzE,MAAK,SAAA0E,GACjCA,EAAaC,kB","file":"static/js/main.95c44c53.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\n\n/* Function component(stateless component), for passing the props.\n * Since they are stateless we will use hooks here. Hooks let us use state without using the class.\n * Always use ES6 annotation. Fat arrow function(nicer way!!!)\n**/\nconst Pokemon = (props) => {\n    //React hook for state\n    const [pokemonCard, setPokemonCard] = useState({\n        //dataArray will not hold the nested data to display, create a corresponding object/array into it to read the nested values.\n        //dataArray: {\n            sprites: {},\n            id: 0\n        //}\n    });\n    /** useEffect hook is called each time the virutal DOM is loaded. It covers all the component lifecycle events. Hence the code from previous commit was adding infite ajax calls.\n      * Equivalent of componentDidUpdate and componentDidMount in one effect. \n      * To limit the useEffect call to only when this function is called, use the second variable (props.url). It essentially tells, call useEffect when certain prop changes.\n      * If want to load this first time, leave the second parameter as empty array i.e to get the componentDidMount effect\n      */  \n    useEffect(() => {\n        axios.get(props.url)\n        .then(function(response) {\n            setPokemonCard({\n                sprites: response.data.sprites,\n                id: response.data.id\n            })\n        })\n        .catch(function(error) {\n            console.log(error);\n        })\n    }, [props.url]);\n\n    return (\n        <div>\n            <Link to={'/pokedex-react/' + pokemonCard.id}>\n                <img src={pokemonCard.sprites.front_default} alt={props.name}/>\n                <span>{props.name}</span>\n            </Link>\n        </div>\n    )\n}\nexport default Pokemon;","import React from 'react';\n\nimport Pokemon from '../Pokemon/pokemon.js';\nimport './pokeframe.css';\n\n//This component will make call to PokeApi, class based component\nexport default class Pokeframe extends React.Component {\n    //Store states here, constructor is called first when the component is created\n    constructor() {\n        super();\n        this.state = { \n            pokemons: [], \n            scrolledPokemon: [],\n            pageNumber: 0,\n            pageOffset: 0, \n            limit: 15, \n            isFetching: false,\n        }\n    }\n    /* Called after DOM load. Initialisation that require DOM nodes, can go here.\n     * As per the pokeapi.io, to fetch next 20 results set offset. By deafult showing 20 resource in a page. \n     **/\n    componentDidMount() {\n        this.getAllPokemon();\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n    /* Function called whenever state changed*/\n    componentDidUpdate() {\n        if (!this.state.isFetching) \n            return;\n        this.getAllPokemon();\n    }\n\n    getAllPokemon = () => {\n        fetch(`https://pokeapi.co/api/v2/pokemon?limit=${this.state.limit}&offset=${this.state.pageOffset}`)\n        .then(res => res.json())\n        .then(response => {\n            //Add the list to an empty array to keep adding new list\n            this.state.scrolledPokemon.push(...response.results);\n            this.setState({pokemons: this.state.scrolledPokemon});\n        });\n        //Set isFetching to false, very imp\n        this.setState({isFetching: false});\n    }\n    \n    handleScroll = () => {\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight)\n            return; \n        this.setState({\n            isFetching: true, \n            pageOffset: this.state.pageOffset + 15\n        });\n    }\n\n    //Call the methods with ES6 annotation, render is mandatory for components, others are optional\n    render = () => {\n        return (\n            <div>\n                <div>gotta catch em all</div>\n                <div>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            { this.state.pokemons.map((pokemon,index) =>\n                                <div className=\"col-sm-4 justify-content-center my-5\" key={index}>\n                                    <Pokemon name={pokemon.name} url={pokemon.url}/>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react';\n\nimport axios from 'axios';\nimport './detailedView.css';\n\n//We get the props from the Route on App.js file. We get the id as it will be used in ajax call for specific Pokemon detail\nconst DetailedView = (props) => {\n    const [pokemonDetail, setPokemonDetail] = useState({\n        sprites: {},\n        name: '',\n        height: '',\n        weight: '', \n        types: [],\n        abilities: [], \n        stats: [{\n            base_stat: 0,\n            stat: {}\n        }]\n    });\n\n    useEffect(() => {\n        if (props.match.params.pokemonId) {\n            var id = props.match.params.pokemonId;\n            axios.get(`https://pokeapi.co/api/v2/pokemon/` + id)\n            .then(function(response) {\n                setPokemonDetail({\n                    sprites: response.data.sprites,\n                    name: response.data.name,\n                    height: response.data.height,\n                    weight: response.data.weight,\n                    types: response.data.types,\n                    abilities: response.data.abilities,\n                    stats: response.data.stats\n                })\n            })\n            .catch(function(error) {\n                console.log(error);\n            })\n        }\n    }, [props.match.params.pokemonId])\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-4\">\n                    <div className=\"pokemon-image\" style={{backgroundImage:`url(${pokemonDetail.sprites.front_default})`}}></div>\n                </div>\n                <div className=\"col-sm-4 section--left-alignment\">\n                    <div><span>Name:</span> {pokemonDetail.name}</div>\n                    <div><span>Height:</span> {pokemonDetail.height}</div>\n                    <div><span>Weight:</span> {pokemonDetail.weight}</div>\n                    <div>\n                        <span>Type:</span>\n                        <ul>\n                            { pokemonDetail.types.map((type,index) =>\n                                <li key={index}>{type.type.name}</li>\n                            )}\n                        </ul>\n                        <span>Ability:</span>\n                        <ul>\n                            { pokemonDetail.abilities.map((ability,index) =>\n                                <li key={index}>{ability.ability.name}</li>\n                            )}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"col-sm-4 section--left-alignment\">\n                    <span>Stats:</span>\n                    <ul>\n                        { pokemonDetail.stats.map((statIterator, index) => \n                            <li key={index}><span>{statIterator.stat.name}: </span>{statIterator.base_stat}</li>\n                        )}\n                    </ul>\n                </div>\n            </div>    \n        </div>\n    )\n  }\nexport default DetailedView","import React from 'react';\nimport {HashRouter, Route} from 'react-router-dom';\n\nimport './App.css';\nimport Pokeframe from './Pokeframe/pokeframe.js';\nimport DetailedView from './DetailedView/detailedView.js';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Route path=\"/\" exact component={Pokeframe}/>\n        <Route path=\"/pokedex-react\" exact component={Pokeframe}/>\n        <Route path=\"/pokedex-react/:pokemonId\" exact component={DetailedView}/>  \n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}